<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小明博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-25T08:00:04.703Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mae</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript遍历数组</title>
    <link href="http://yoursite.com/2020/07/25/JavaScript%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2020/07/25/JavaScript%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/</id>
    <published>2020-07-25T07:59:11.000Z</published>
    <updated>2020-07-25T08:00:04.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="for循环遍历"><a href="#for循环遍历" class="headerlink" title="for循环遍历"></a>for循环遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-…in…"><a href="#for-…in…" class="headerlink" title="for(…in…)"></a>for(…in…)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> a)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-…of…"><a href="#for-…of…" class="headerlink" title="for(…of…)"></a>for(…of…)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">of</span> a)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>参数是一个function，function的参数有三个，当前遍历的值，索引，当前的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a.forEach(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>对数组的每一项都执行给定的函数，返回每次函数调用的结果所组成的数组，函数的参数与forEach一致</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a.map(<span class="function"><span class="params">x</span>=&gt;</span>x+<span class="number">1</span>)</span><br><span class="line"><span class="comment">//[2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>让数组每一项都运行给定的函数，并返回函数返回了true的项组成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a.filter(<span class="function"><span class="params">x</span>=&gt;</span>x&gt;<span class="number">3</span>)</span><br><span class="line"><span class="comment">//[4,5]</span></span><br></pre></td></tr></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>让数组的每一项执行给定的函数，如果每一项发挥的都湿true，则返回true,即所有项都满足则返回true，否则false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a.every(<span class="function"><span class="params">x</span>=&gt;</span>x&lt;<span class="number">6</span>)</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line">a.every(<span class="function"><span class="params">x</span>=&gt;</span>x&gt;<span class="number">2</span>)</span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>与every相反，只要有一项是true则返回true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a.some(<span class="function"><span class="params">x</span>=&gt;</span>x&lt;<span class="number">2</span>)</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="reduce、reduceright"><a href="#reduce、reduceright" class="headerlink" title="reduce、reduceright"></a>reduce、reduceright</h2><p>数组的归并方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式</span></span><br><span class="line"><span class="built_in">Array</span>.reduce(<span class="function">(<span class="params">pre,next,index,array</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;,[number])</span><br><span class="line"></span><br><span class="line"><span class="comment">//例</span></span><br><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a.reduce(<span class="function">(<span class="params">pre,next,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre+next</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//15</span></span><br></pre></td></tr></table></figure><p>参数数组第一项、数组第二项、索引、数组执行完一次后pre都会被上次的结果替换，next则会继续遍历数组,可选参数number可以用来规定pre的初始化，next就是数组第一项，如没有则pre初始化数组第一项，next初始化为数组第二项，reduceright与reduce用法一致，一个是从左往右，一个是从右往左</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;for循环遍历&quot;&gt;&lt;a href=&quot;#for循环遍历&quot; class=&quot;headerlink&quot; title=&quot;for循环遍历&quot;&gt;&lt;/a&gt;for循环遍历&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JS数组方法（返回值以及是否改变原数组）</title>
    <link href="http://yoursite.com/2020/07/25/JS%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%EF%BC%88%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BB%A5%E5%8F%8A%E6%98%AF%E5%90%A6%E6%94%B9%E5%8F%98%E5%8E%9F%E6%95%B0%E7%BB%84%EF%BC%89/"/>
    <id>http://yoursite.com/2020/07/25/JS%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%EF%BC%88%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BB%A5%E5%8F%8A%E6%98%AF%E5%90%A6%E6%94%B9%E5%8F%98%E5%8E%9F%E6%95%B0%E7%BB%84%EF%BC%89/</id>
    <published>2020-07-25T06:52:51.000Z</published>
    <updated>2020-07-25T06:53:38.632Z</updated>
    
    <content type="html"><![CDATA[<p>数组是js最常用的类型，JavaScript提供了很多数组的方法，今天我们就来好好整理一下。</p><h3 id="1、push"><a href="#1、push" class="headerlink" title="1、push"></a>1、push</h3><h5 id="在数组末尾插入元素"><a href="#在数组末尾插入元素" class="headerlink" title="在数组末尾插入元素"></a>在数组末尾插入元素</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a.push(<span class="number">4</span>)</span><br><span class="line">a<span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>push方法会改变原数组<br>返回值为插入后数组的长度</p><h3 id="2、pop"><a href="#2、pop" class="headerlink" title="2、pop"></a>2、pop</h3><h5 id="移除数组最后一项"><a href="#移除数组最后一项" class="headerlink" title="移除数组最后一项"></a>移除数组最后一项</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a.pop()</span><br><span class="line">a<span class="comment">//[2]</span></span><br></pre></td></tr></table></figure><p>会改变原数组<br>返回值为被移除的元素</p><h3 id="3、shift"><a href="#3、shift" class="headerlink" title="3、shift"></a>3、shift</h3><h5 id="获取数组头部元素"><a href="#获取数组头部元素" class="headerlink" title="获取数组头部元素"></a>获取数组头部元素</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a.shift()</span><br><span class="line">a <span class="comment">//[4,5]</span></span><br></pre></td></tr></table></figure><p>会改变原数组<br>返回值为获取到的元素</p><h3 id="4、unshift"><a href="#4、unshift" class="headerlink" title="4、unshift"></a>4、unshift</h3><h5 id="在数组头部插入数据"><a href="#在数组头部插入数据" class="headerlink" title="在数组头部插入数据"></a>在数组头部插入数据</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.unshift(<span class="number">5</span>)</span><br><span class="line">a <span class="comment">//[5,3,4]</span></span><br></pre></td></tr></table></figure><p>会改变原数组<br>返回插入数据后数组的长度</p><h3 id="5、reverse"><a href="#5、reverse" class="headerlink" title="5、reverse"></a>5、reverse</h3><h5 id="反转数组"><a href="#反转数组" class="headerlink" title="反转数组"></a>反转数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.reverse()</span><br><span class="line">a<span class="comment">//[5,4,3,2,1]</span></span><br></pre></td></tr></table></figure><p>会改变原数组<br>返回反转后的数组</p><h3 id="6、sort"><a href="#6、sort" class="headerlink" title="6、sort"></a>6、sort</h3><h5 id="默认升序排序"><a href="#默认升序排序" class="headerlink" title="默认升序排序"></a>默认升序排序</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">6</span>]</span><br><span class="line">a.sort()</span><br><span class="line">a<span class="comment">//[1,3,5,6,7]</span></span><br><span class="line">a.sort(<span class="function">(<span class="params">v1,v2</span>)=&gt;</span>v2-v1)<span class="comment">// 降序</span></span><br><span class="line">a<span class="comment">//[7,6,5,3,1]</span></span><br></pre></td></tr></table></figure><p>会改变原数组<br>返回排序后的数组</p><h3 id="7、concat"><a href="#7、concat" class="headerlink" title="7、concat"></a>7、concat</h3><h5 id="数组拼接"><a href="#数组拼接" class="headerlink" title="数组拼接"></a>数组拼接</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> b=[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.concat(b)<span class="comment">//[1,2,3,4]</span></span><br><span class="line">a<span class="comment">//[1,2]</span></span><br><span class="line">b<span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure><p>不改变原数组<br>返回一个两个数组拼接后的新数组</p><h3 id="8、slice"><a href="#8、slice" class="headerlink" title="8、slice"></a>8、slice</h3><h5 id="取部分数组，接收两个参数，开始位置和结束位置"><a href="#取部分数组，接收两个参数，开始位置和结束位置" class="headerlink" title="取部分数组，接收两个参数，开始位置和结束位置"></a>取部分数组，接收两个参数，开始位置和结束位置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">a.slice(<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//[3]</span></span><br><span class="line">a <span class="comment">//[1,2,3,5]</span></span><br></pre></td></tr></table></figure><p>不会改变原数组<br>返回取出的新数组</p><h3 id="9、splice"><a href="#9、splice" class="headerlink" title="9、splice"></a>9、splice</h3><h5 id="数组中删除、插入、替换元素"><a href="#数组中删除、插入、替换元素" class="headerlink" title="数组中删除、插入、替换元素"></a>数组中删除、插入、替换元素</h5><p>参数(第几项开始，个数，替换元素)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">let</span> del=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">del.splice(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//删除从第1项开始后的两项</span></span><br><span class="line">del<span class="comment">//[1,4]</span></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="keyword">let</span> add=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">add.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>) <span class="comment">//删除从第二项开始的0个字符并插入1</span></span><br><span class="line">add<span class="comment">//[1,2,1,3]</span></span><br><span class="line"><span class="comment">//替换</span></span><br><span class="line"><span class="keyword">let</span> chan=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">chan.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">chan <span class="comment">//[1,2,5,4]</span></span><br></pre></td></tr></table></figure><p>会改变原数组<br>返回被删除的数组</p><h3 id="10、indexOf、lastindexOf"><a href="#10、indexOf、lastindexOf" class="headerlink" title="10、indexOf、lastindexOf"></a>10、indexOf、lastindexOf</h3><h5 id="查找元素的索引"><a href="#查找元素的索引" class="headerlink" title="查找元素的索引"></a>查找元素的索引</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a.indexOf(<span class="number">2</span>)<span class="comment">//1</span></span><br><span class="line">a.lastindexOf(<span class="number">2</span>)<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>不会改变原数组<br>返回查找元素的索引。</p><p>后续还有数组的迭代方法，请继续关注后面的博客</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数组是js最常用的类型，JavaScript提供了很多数组的方法，今天我们就来好好整理一下。&lt;/p&gt;
&lt;h3 id=&quot;1、push&quot;&gt;&lt;a href=&quot;#1、push&quot; class=&quot;headerlink&quot; title=&quot;1、push&quot;&gt;&lt;/a&gt;1、push&lt;/h3&gt;&lt;h5
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建个人博客完整过程</title>
    <link href="http://yoursite.com/2020/07/24/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/07/24/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4%E8%BF%87%E7%A8%8B/</id>
    <published>2020-07-24T14:29:30.000Z</published>
    <updated>2020-07-24T14:30:00.341Z</updated>
    
    <content type="html"><![CDATA[<p>在我们日常中要保持不断的学习，写技术博客就是其中一种，程序员很有必要有自己的一个个人博客，不管是静态搭建的还是自己从零开始一步步实现的，写技术博客都是一种技术分享和学习的有效方法。<br>这里我的博客搭建使用的hexo来搭建的并放在了github-page上，一些人可能看着官方文档会有点乱，这边我就介绍一下hexo博客的基本用法，从搭建到部署</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>搭建hexo需要使用npm，因此要先从<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">nodejs</a>官网上下载最新的nodejs稳定版，安装好了之后我们执行下面的步骤，全局安装hexo的一个脚手架</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>如果网速较慢则执行下面这一句,使用淘宝镜像</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><p>执行完了之后我们在执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init project_name</span><br><span class="line">cd project_name</span><br><span class="line">npm install</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>执行完后我们就可以在我们的localhost 4000端口看到当前的博客了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200724211656192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDI2MDcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>这是他的一个默认主题。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>hexo使用yml来进行一个配置的，我们可以看到项目更目录下有个_config.yml文件，这就是一个配置文件，打开它可以对基本的一些信息进行配置。yml配置要在冒号后面加一个空格<br><strong>_config.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span></span><br></pre></td></tr></table></figure><p>可以看到这边我们可以配置一个网站的标题，副标题，对网站的描述，关键字，作者，语言以及时区，我们可以配置下语言为中文，修改为zh-CN即可，其他的可以随便改，时区可以不填，剩下的都暂时不用修改</p><h1 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h1><p>hexo博客有三种一种为post(默认)、page、draft<br>写博客很简单我们只要执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> 博客名</span><br></pre></td></tr></table></figure><p>就可以看到根目录下的source下的post文件夹下产生了一个博客名.md，打开可以看到我们在博客下有这样的内容</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: one</span><br><span class="line">date: 2020-07-24 21:24:38</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这是一篇博客的信息，博客名，事件，标签，然后就可以用md格式来写博客啦。<br>写完后重新server一下就可以在4000端口下看到你的博客了。<br>page和draft也是同理，只不过page是一篇博客创建单独的一个文件夹，draft是草稿，不会显示在博客中<br>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page/draft 名字</span><br></pre></td></tr></table></figure><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>有人说，这个博客太丑了，不是我想要的，hexo提供了主题的修改，hexo的默认主题的landscape就是theme这个文件夹下的，一个主题就包含了language、script、layou、source四个文件，还有一个yml配置文件，我们也可以看到根目录下的配置文件中的默认theme值也是landscape。<br>由于hexo的主题有很多，大家可以在github上自行下载按照作者的配置文件来更改就行，我这边就拿我自己用的<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo主题</a>来做讲解。<br>首先我们安装git，然后在项目路径下执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/yscoder/hexo-theme-indigo themes/indigo</span></span><br></pre></td></tr></table></figure><p>然后就可以在themes中的indigo文件夹中的yml配置文件中修改数据，这边可以根据作者写的文档来进行修改， <strong>这边要注意不同的主题修改的配置不一样的具体还是要看作者的文档来进行安装配置</strong><br>然后修改项目的yml配置文件中的theme改为indigo即可<br>当然这个indigo主题还要自己创建一下tags和categories文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page tags</span><br><span class="line">hexo <span class="keyword">new</span> page categories</span><br></pre></td></tr></table></figure><p>然后再根据作者的readme文件或者可以修改一下ejs等做一个自己喜欢的样子的，这一块读者自己摸索。<br>我这边做完之后就是这个样子的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200724214704317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDI2MDcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>这边我们部署在GitHub-page上，我们在guthub上建一个仓库名字叫做：&lt;你的 GitHub 用户名&gt;.github.io这个名字是固定的不能随意修改<br>然后我们安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>然后我们在项目的yml配置文件中修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span>  <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">仓库地址</span></span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>执行完后就可以在https://仓库名   该网页中访问到你的博客了，以后每次写完博客或者是修改后在执行上面三步步骤即可</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>希望读者可以关注下<a href="https://mjw-git.github.io/" target="_blank" rel="noopener">我的博客</a>和这个csdn博客。<br>有问题可以加qq 547783781留言</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在我们日常中要保持不断的学习，写技术博客就是其中一种，程序员很有必要有自己的一个个人博客，不管是静态搭建的还是自己从零开始一步步实现的，写技术博客都是一种技术分享和学习的有效方法。&lt;br&gt;这里我的博客搭建使用的hexo来搭建的并放在了github-page上，一些人可能看着
      
    
    </summary>
    
    
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>js实现继承</title>
    <link href="http://yoursite.com/2020/07/24/js%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2020/07/24/js%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/</id>
    <published>2020-07-24T14:23:36.000Z</published>
    <updated>2020-07-24T14:26:41.970Z</updated>
    
    <content type="html"><![CDATA[<p>在学习继承前希望读者先去学习下js原型和原型对象的知识。<br><a href="https://blog.csdn.net/qq_40026070/article/details/107516521" target="_blank" rel="noopener">对于js原型和原型对象的理解</a></p><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><p>让一个函数的原型指向另一个引用类型的对象,这个对象中又有指针是指向另一个引用类型的原型对象的，原型对象也可以继续指下去，直到原型链的末端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">'动物'</span></span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">'猫'</span></span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype=<span class="keyword">new</span> Animal()</span><br><span class="line"><span class="keyword">let</span> c=<span class="keyword">new</span> Cat()</span><br><span class="line">c.say()   <span class="comment">//猫</span></span><br><span class="line"><span class="comment">//可以看到Cat继承了say这个方法</span></span><br></pre></td></tr></table></figure><p>这里的Cat的prototype指向了Animal的实例，而Animal的实例的属性_proto_指向了Animal.prototype，Animal.prototype的constructor又指向了Animal构造函数，这就是构成了一条原型链，原型链到这里其实还没有结束，因为我们知道所有的对象都是继承Object的,所以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal.prototype._proto_==<span class="built_in">Object</span>.prototype <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype._proto_==<span class="built_in">Object</span>  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>这样就构成了一个完整的原型链，这边要注意的是所有函数的原始原型对象都是指向Object原型对象的。原型链的末端就是Object.prototype<br>如图所示：<br>红色线条就构成了一条原型链</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200723174427719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDI2MDcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>原型链的特点就是它既是子类的实例也是父类的实例，且如果继承的对象中是个引用类型的，那么这将会被所有实例全部引用一个引用类型的数据，原型链继承一般也很少使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c <span class="keyword">instanceof</span> Animal <span class="comment">//true</span></span><br><span class="line">c <span class="keyword">instanceof</span> Cat    <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h4><p>这个方法其实很简单，就是通过call或者是apply在一个构造函数中执行一下另一个构造函数即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type=[<span class="string">'狗'</span>,<span class="string">'猪'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Animal.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c=<span class="keyword">new</span> Cat()</span><br><span class="line">c.type.push(<span class="string">'猫'</span>)</span><br><span class="line">c.type <span class="comment">//['狗','猪','猫']</span></span><br><span class="line"><span class="comment">//可以看到Cat继承了Animal的type属性。</span></span><br></pre></td></tr></table></figure><p>构造函数继承中不存在函数复用，所有都是借用构造函数来初始化的，所以我们也很少用</p><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><p>组合继承顾名思义，就是将原型链继承和构造函数继承放在一块来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'--动物--'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    Animal.call(<span class="keyword">this</span>,name)</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype=<span class="keyword">new</span> Animal()</span><br><span class="line">Cat.prototype.constructor=Cat</span><br><span class="line"><span class="keyword">let</span> c=<span class="keyword">new</span> Cat(<span class="string">'猫'</span>)</span><br><span class="line">c.name<span class="comment">//猫</span></span><br><span class="line">c.say() <span class="comment">//--动物--</span></span><br></pre></td></tr></table></figure><p>组合继承最大的缺点就是它会调用两次父类的构造函数。</p><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><p>最开始原型式的继承提出方案是这个样子的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    f.prototype=obj</span><br><span class="line">    <span class="keyword">let</span> F=<span class="keyword">new</span> f()</span><br><span class="line">    <span class="keyword">return</span> F</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> people=&#123;<span class="attr">name</span>:<span class="string">'姓名'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> object(people)</span><br><span class="line">p.name <span class="comment">//姓名</span></span><br></pre></td></tr></table></figure><p>object函数接受一个对象  然后在函数里面声明一个局部的构造函数，让其原型指向传过来的参数，然后实例化并返回就可</p><p>ECMAScript5规范化了原型式继承，即Object.create接收两个参数，一个是用作新对象原型的对象和一个新对象作为额外的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Animal=&#123;<span class="attr">name</span>:<span class="string">'动物'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> Cat=<span class="built_in">Object</span>.create(Animal)</span><br><span class="line">Cat.name <span class="comment">//动物</span></span><br></pre></td></tr></table></figure><p>只是一个对象要类似于另一个对象，这是完全可以胜任的，要注意的就是引用类型的继承还是会共享相应的值。</p><h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><p>与原型式基本类似，只不过函数中创建对象的方式不同 ，他只考虑最基本的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> clone=object(obj)  <span class="comment">//调用原型式的函数</span></span><br><span class="line">    clone.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'说话'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p=&#123;<span class="attr">name</span>:<span class="string">'姓名'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> o=create(p)</span><br><span class="line">o.name<span class="comment">// 姓名</span></span><br><span class="line">o.say<span class="comment">// 说话</span></span><br></pre></td></tr></table></figure><p>如果只考虑最基本的对象而不考虑通过构造函数来生成对象的话，寄生式继承也是一种好的方式</p><h4 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h4><p>在介绍寄生组合前我们先来看下组合继承的两次生成实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">'动物'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Animal.call(<span class="keyword">this</span>) <span class="comment">//第二次调用</span></span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype=<span class="keyword">new</span> Animal() <span class="comment">//第一次调用</span></span><br><span class="line">Cat.Prototype.constructor=Cat</span><br><span class="line"><span class="keyword">let</span> c=<span class="keyword">new</span> Cat()</span><br></pre></td></tr></table></figure><p>我们可以看到组合继承调用了两次父类的构造函数，第二次调用会使得原型中的属性被实例中的同名属性所覆盖，因此要解决这个问题，就有了寄生组合继承,其实就是在定义子类的原型时不去new父类，我们只要一开始的时候获取到父类的原型对象的副本即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">'动物'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Animal.call(<span class="keyword">this</span>) <span class="comment">//只有这一次执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o=<span class="built_in">Object</span>.create(Animal.prototype)<span class="comment">//获取一个父类原型的副本</span></span><br><span class="line">Cat.prototype=o</span><br><span class="line">Cat.prototype.constructor=Cat</span><br><span class="line"><span class="keyword">let</span> c=<span class="keyword">new</span> Cat()</span><br><span class="line">c.name <span class="comment">//动物</span></span><br></pre></td></tr></table></figure><h4 id="es6中的继承"><a href="#es6中的继承" class="headerlink" title="es6中的继承"></a>es6中的继承</h4><p>es6中新增了class extends关键字，让js具有了与其他OO语言一样的对象写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'aaa'</span>)</span><br><span class="line">        <span class="keyword">this</span>.a=<span class="string">'a'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'bbb'</span>)</span><br><span class="line">        <span class="keyword">this</span>.b=<span class="string">'b'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b=<span class="keyword">new</span> B()</span><br><span class="line">b.a <span class="comment">//'a'</span></span><br><span class="line">b.b <span class="comment">//'b'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习继承前希望读者先去学习下js原型和原型对象的知识。&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/qq_40026070/article/details/107516521&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;对于js
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>vue+express实现音乐播放器</title>
    <link href="http://yoursite.com/2020/07/24/hello-world/"/>
    <id>http://yoursite.com/2020/07/24/hello-world/</id>
    <published>2020-07-24T07:45:56.235Z</published>
    <updated>2020-07-24T04:00:42.460Z</updated>
    
    <content type="html"><![CDATA[<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/2020052219591257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDI2MDcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>因为html中的audio的样式不能更改，所以我们自己制作UI，做成自己想要的样子，这样要实现滑动条跟audio的双向绑定，滑动条使用了vant的组件slider，audio单向绑定到slider我们通过监听勾子 timeupdate</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span>  @<span class="attr">canplay</span>=<span class="string">"canplay"</span>  <span class="attr">preload</span>=<span class="string">"preload"</span> @<span class="attr">timeupdate</span>=<span class="string">"updateTime"</span> <span class="attr">ref</span>=<span class="string">"audio"</span> <span class="attr">:src</span>=<span class="string">"music"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面的这个是实时监听函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">updateTime(e) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = geci.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.target.currentTime &gt; geci[i][<span class="number">0</span>]) &#123;</span><br><span class="line">          <span class="keyword">this</span>.$refs.passage.innerHTML = geci[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">this</span>.current = e.target.currentTime;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.count % <span class="number">2</span> == <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.value = (e.target.currentTime * <span class="number">100</span>) / <span class="keyword">this</span>.time;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isNaN</span>(<span class="keyword">this</span>.value))&#123;</span><br><span class="line">          <span class="keyword">this</span>.value=<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">       &#125; </span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.value == <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.index!=<span class="keyword">this</span>.music_list.length<span class="number">-1</span>)&#123;</span><br><span class="line">          <span class="keyword">this</span>.index=<span class="keyword">this</span>.index+<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">this</span>.music=<span class="string">'http://localhost:3000/'</span>+<span class="keyword">this</span>.music_list[<span class="keyword">this</span>.index]</span><br><span class="line">         <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.$refs.audio.load()</span><br><span class="line">             setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">               resolve()</span><br><span class="line">             &#125;,<span class="number">1000</span>)</span><br><span class="line">         &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.$refs.audio.play()</span><br><span class="line">         &#125;)</span><br><span class="line">         </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>这个函数前一部分for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = geci.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.target.currentTime &gt; geci[i][<span class="number">0</span>]) &#123;</span><br><span class="line">          <span class="keyword">this</span>.$refs.passage.innerHTML = geci[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>是歌词的处理，后面会讲到，判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.count % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">//这个判断是解除双向绑定的冲突的，后面会讲到，</span></span><br></pre></td></tr></table></figure><p>这个判断是解除双向绑定的冲突的，后面也会讲到，</p><p>Value是slider的百分比，我们通过当前时间乘以100在除以总时间来获得。总时间的获得我们通过canplay函数来监听，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">canplay() &#123;</span><br><span class="line">     <span class="keyword">this</span>.time = <span class="keyword">this</span>.$refs.audio.duration;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.time)</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.value == <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.index!=<span class="keyword">this</span>.music_list.length<span class="number">-1</span>)&#123;</span><br><span class="line">          <span class="keyword">this</span>.index=<span class="keyword">this</span>.index+<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">this</span>.music=<span class="string">'http://localhost:3000/'</span>+<span class="keyword">this</span>.music_list[<span class="keyword">this</span>.index]</span><br><span class="line">         <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.$refs.audio.load()</span><br><span class="line">             setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">               resolve()</span><br><span class="line">             &#125;,<span class="number">1000</span>)</span><br><span class="line">         &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.$refs.audio.play()</span><br><span class="line">         &#125;)</span><br><span class="line">         </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这一部分我们是当音乐播放完那么value是100所以我们要播放下一首歌，要先判断歌单里是否有还有歌曲，如果有则进行下一曲，然后在执行play继续播放，这边播放遇到了一个问题就是audio的play好像是个异步，所以我们load之后在等1秒钟然后在.then中执行play这样就能正常播放到下一首了。如果已经是最后一首了就return。Audio绑slider就到这。</p><h6 id="接下来是slider绑定audio"><a href="#接下来是slider绑定audio" class="headerlink" title="接下来是slider绑定audio"></a>接下来是slider绑定audio</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-slider</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">drag-end</span>=<span class="string">"end"</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">drag-start</span>=<span class="string">"start"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"s"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">button-size</span>=<span class="string">"10px"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">"value"</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">change</span>=<span class="string">"onChange"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>我们通过slider的change来绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">onChange(value) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs.audio.play()</span><br><span class="line">     </span><br><span class="line">      <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">     <span class="comment">/*  console.log(value);</span></span><br><span class="line"><span class="comment">      console.log(this.time);</span></span><br><span class="line"><span class="comment">      console.log(value * this.time); */</span></span><br><span class="line">      <span class="comment">/* let tt=9 */</span></span><br><span class="line">     <span class="comment">/*  console.log( this.$refs.audio.currentTime) */</span></span><br><span class="line">       <span class="keyword">let</span> tt = <span class="built_in">Math</span>.floor((value * <span class="keyword">this</span>.time) / <span class="number">100</span>); </span><br><span class="line">      <span class="keyword">this</span>.$refs.audio.currentTime = tt;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>就通过简单的计算来绑定audio的currentime，因为双向绑定所以在我们移动的时候，audio会一直影响进度条，我们slider向audio绑定的时候，audio也会向我们产生绑定这样我们的小圆点就会一直跳来跳去。所以我们就对在audio的监听函数中来进行判断是否移动slider小圆点，所以才会有之前的判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  start() &#123;</span><br><span class="line">       <span class="keyword">this</span>.count = (<span class="keyword">this</span>.count + <span class="number">1</span>) % <span class="number">2</span>; </span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">end() &#123;</span><br><span class="line">       <span class="keyword">this</span>.count = (<span class="keyword">this</span>.count + <span class="number">1</span>) % <span class="number">2</span>; </span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>按下小圆点和松开小圆点每次都对count进行+1取余即可，监听函数就像上面所看到的一样判断this.count为1和为0即可。</p><h6 id="获取歌单"><a href="#获取歌单" class="headerlink" title="获取歌单"></a>获取歌单</h6><p>我们没有显示到界面上，因为懒得做，所以我们用express发送我们的歌单</p><p>后台路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/getall'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result=fs.readdirSync(<span class="string">'./public'</span>)</span><br><span class="line">  res.json(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>就一个简单的文件读取，然后我们开启静态服务就可以根据url去访问特定的文件了。</p><h6 id="前台接收"><a href="#前台接收" class="headerlink" title="前台接收"></a>前台接收</h6><p>Axios发送请求，在created中执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">    axios(&#123;</span><br><span class="line">      url: <span class="string">"http://localhost:3000/getall"</span>,</span><br><span class="line">      method: <span class="string">"get"</span></span><br><span class="line">    &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">        <span class="keyword">this</span>.music = <span class="string">'http://localhost:3000/'</span>+response.data[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">this</span>.music_list = response.data;</span><br><span class="line">        </span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>初始化music即audio的src，为第一个把url补全即可，然后把整个歌单都给music_list即可<br>这边我们的界面播放暂停和音量slider是否弹出是通过vue的v-show和flex布局来实现的。这边就不说了。懂得都懂。</p><h6 id="下一首歌"><a href="#下一首歌" class="headerlink" title="下一首歌"></a>下一首歌</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">next() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.index == <span class="keyword">this</span>.music_list.length<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.index = <span class="keyword">this</span>.index + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">this</span>.music =<span class="string">'http://localhost:3000/'</span>+ <span class="keyword">this</span>.music_list[<span class="keyword">this</span>.index];</span><br><span class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reslove(), <span class="number">1000</span>);</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.$refs.audio.play();</span><br><span class="line">          <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>下一首歌的函数，首先判断是否为最后一首，如果是则return，不是则index索引+1然后this.music赋值为music_list[index]然后play这边也封装在一个promise中以防万一。。。。<br>上一首歌一样的道理就不多说了直接上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pre() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.index == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.index = <span class="keyword">this</span>.index - <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">this</span>.music = <span class="string">'http://localhost:3000/'</span>+<span class="keyword">this</span>.music_list[<span class="keyword">this</span>.index];</span><br><span class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reslove(), <span class="number">1000</span>);</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">this</span>.$refs.audio.play();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>音量的处理很简单通过代表音量slider的value值来进行赋值就行，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">changevoice()&#123;</span><br><span class="line">     <span class="keyword">this</span>.$refs.audio.volume=(<span class="number">100</span>-<span class="keyword">this</span>.voice)/<span class="number">100</span></span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>简单的一个百分比到小数的处理，audio的音量为小数，1为最大<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200522201028800.png" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><br>最后这个时间的处理左边的就实时获取就上面讲到的一个函数，总时间也是，然后我们写了个过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">   changetime: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">Math</span>.floor(value % <span class="number">60</span>) &lt; <span class="number">10</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">Math</span>.floor(value / <span class="number">60</span>) + <span class="string">":0"</span> + <span class="built_in">Math</span>.floor(value % <span class="number">60</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">Math</span>.floor(value / <span class="number">60</span>) + <span class="string">":"</span> + <span class="built_in">Math</span>.floor(value % <span class="number">60</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>来标准化时间，个位数就补0即可<br>使用就跟下面这样就行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"times"</span>&gt;</span>&#123;&#123;current|changetime&#125;&#125;/&#123;&#123;time|changetime&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后是歌词的处理，这边我只处理了一首歌。后面的处理都一样的。<br>我们时使用irc文件他的格式类似key，value，[时间，歌词]<br>就跟下面这样子一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">0</span>, <span class="string">'RISE 登峰造极境 - The Glitch Mob/Mako/The Word Alive'</span> ],</span><br><span class="line">    [ <span class="number">3.39</span>, <span class="string">'词：英雄联盟/The Glitch Mob/Mako/The Word Alive'</span> ],</span><br><span class="line">    [ <span class="number">6.79</span>, <span class="string">'曲：英雄联盟/The Glitch Mob/Mako/The Word Alive'</span> ],</span><br><span class="line">    [ <span class="number">10.19</span>, <span class="string">'Welcome to the wild no heroes and villains'</span> ],</span><br><span class="line">    [ <span class="number">15.5</span>, <span class="string">"Welcome to the war we've only begun so"</span> ],</span><br><span class="line">    [ <span class="number">20.84</span>, <span class="string">'Pick up your weapon and face it'</span> ],</span><br><span class="line">    [ <span class="number">23.46</span>, <span class="string">"There's blood on the crown go and take it"</span> ],</span><br></pre></td></tr></table></figure><p>这是我已经处理好的样子，我用node处理讲一句放在数组中形式为[时间，歌词],然后全部歌词就放在一个[[时间，歌词]]中。然后放在对audio的实时监听中，函数如下就之前上面放过了就updatetime函数中的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = geci.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.target.currentTime &gt; geci[i][<span class="number">0</span>]) &#123;</span><br><span class="line">          <span class="keyword">this</span>.$refs.passage.innerHTML = geci[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>这一部分然后把就这样显示了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200522201235670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDI2MDcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>这边歌词我没有从后端发送。因为要读文件然后输出有一些异步处理。我是直接放在了一个前端的js文件中，就像这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports.geci=[</span><br><span class="line">    [ <span class="number">0</span>, <span class="string">'RISE 登峰造极境 - The Glitch Mob/Mako/The Word Alive'</span> ],</span><br><span class="line">    [ <span class="number">3.39</span>, <span class="string">'词：英雄联盟/The Glitch Mob/Mako/The Word Alive'</span> ],</span><br><span class="line">    [ <span class="number">6.79</span>, <span class="string">'曲：英雄联盟/The Glitch Mob/Mako/The Word Alive'</span> ],</span><br><span class="line">    [ <span class="number">10.19</span>, <span class="string">'Welcome to the wild no heroes and villains'</span> ],</span><br><span class="line">    [ <span class="number">15.5</span>, <span class="string">"Welcome to the war we've only begun so"</span> ],</span><br><span class="line">    [ <span class="number">20.84</span>, <span class="string">'Pick up your weapon and face it'</span> ],</span><br></pre></td></tr></table></figure><p>然后在组件中引入<br>中间的图片也不过多说，可以旋转用的css动画实现css代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: change <span class="number">6s</span> linear;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> change &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这样子的。<br>然后我这边就差不多就这么多。</p><h4 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h4><p>这边就差不多花了一天时间，踩了一个坑解决就花了大半天。踩得坑是koa的静态服务，如果我获取的是koa开启的静态服务的url那么audio的进度条是不能移动的导致我卡在了这边一直到最后也没解决，所以我最后使用了express来启动静态服务。其他的地方的话就一些audio的异步处理，将它放在promise中也顺利解决了。界面UI有点丑，可以有很多优化的地方，但大致功能播放音乐，音乐的切换，歌词的显示这些基本功能都实现了。</p><p>要是想要源码可以加qq547783781</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h4&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbo
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Js原型、原型对象</title>
    <link href="http://yoursite.com/2020/07/24/Js%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2020/07/24/Js%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-07-24T01:55:30.000Z</published>
    <updated>2020-07-24T04:00:51.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原型："><a href="#原型：" class="headerlink" title="原型："></a>原型：</h3><p>原型(prototype)是每个函数都具有的一个属性，本质上是一个指针，指向的是函数的原型对象。<br>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">Name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=Name</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype<span class="comment">//可以查看当前Person函数的原型对象。</span></span><br></pre></td></tr></table></figure><h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p>函数中的protype属性所指向的对象，这个对象的用途就是可以指定特定类型的所有实例共享的一个方法和属性，我们不必在构造函数声明一个对象实例的信息。<br>例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;   <span class="comment">//声明一个空的构造函数，构造函数不成文的规定以大写字母开头</span></span><br><span class="line">Person.prototype.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'说话'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1=<span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">let</span> p2=<span class="keyword">new</span> Person()</span><br><span class="line">p1.say()  <span class="comment">//说话</span></span><br><span class="line">p2.say()  <span class="comment">//说话</span></span><br><span class="line"><span class="comment">//可以看到p1、p2都是Person构造函数的实例，且他们都具有say这个方法。</span></span><br></pre></td></tr></table></figure><p>原型对象中具有constructor属性，本质上也是个指针，他指向的是Prototype属性所在的一个函数。即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.constructor==Person <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>当我们调用构造函数来创建一个实例的时候，内部会产生一个指针[[prototype]]，这个指针指向的是原型对象，但是在标准中我们是获取不到这个指针的，但是chrome、firefox等浏览器给了我们一个非标准的属性_proto_，我们可以通过调用实例的这个属性来查看原型对象。<br>虽然我们无法直接访问[[prototype]]属性，但是我们可以通过isPrototypeOf()方法来确定是否存在这个关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.isPrototypeOf(p1) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>在ECMAScript5中新增了一个方法可以返回[[prototype]]这个指针，Object.getPrototypeOf()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(p1)==Person.prototype<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>我们在实例中使用属性或者方法的时候，首先会搜索实例本身，如果找到了该方法或者是属性就会直接调用，没有的话则会去原型对象中进行搜索。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'构造函数中的方法'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'函数原型中的方法'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line">p.say()  <span class="comment">// 构造函数中的方法</span></span><br></pre></td></tr></table></figure><p>上述示例在之前的构造函数中加了一个和原型方法同名的函数。我们new实例在调用后可以看到他是执行了构造函数中的方法，从这就可以看到他是优先执行实例中的方法的（我们可以通过hasOwnProperty来判断属性或者方法是否存在于实例中的。）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.hasOwnProperty(<span class="string">'say'</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="实例、构造函数、原型对象三者的关系。"><a href="#实例、构造函数、原型对象三者的关系。" class="headerlink" title="实例、构造函数、原型对象三者的关系。"></a>实例、构造函数、原型对象三者的关系。</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200722163118458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDI2MDcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>理解了原型和原型对象对后面对象的继承有很大的帮助</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原型：&quot;&gt;&lt;a href=&quot;#原型：&quot; class=&quot;headerlink&quot; title=&quot;原型：&quot;&gt;&lt;/a&gt;原型：&lt;/h3&gt;&lt;p&gt;原型(prototype)是每个函数都具有的一个属性，本质上是一个指针，指向的是函数的原型对象。&lt;br&gt;例如：&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端面试(CSS部分)</title>
    <link href="http://yoursite.com/2020/07/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%951/"/>
    <id>http://yoursite.com/2020/07/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%951/</id>
    <published>2020-07-24T01:52:44.000Z</published>
    <updated>2020-07-24T03:54:30.463Z</updated>
    
    <content type="html"><![CDATA[<h5 id="这是从牛客网上总结下来的css面试基础题的一小部分，后续也会持续更新"><a href="#这是从牛客网上总结下来的css面试基础题的一小部分，后续也会持续更新" class="headerlink" title="这是从牛客网上总结下来的css面试基础题的一小部分，后续也会持续更新"></a>这是从牛客网上总结下来的css面试基础题的一小部分，后续也会持续更新</h5><p><a href="https://pan.baidu.com/s/1TDHvIjtFAEf_CqZpyxdn9Q" target="_blank" rel="noopener">markdown源文件下载</a><br>提取码：8min</p><h2 id="1、css盒模型"><a href="#1、css盒模型" class="headerlink" title="1、css盒模型"></a>1、css盒模型</h2><p>盒模型有两种，一种是w3c提出的标准盒模型，一种是ie盒模型。</p><p>box-sizing:content-box为w3c提出的标准盒模型型，其宽度为border+padding+width，因此设置了内边距和边框会使得盒模型的宽度增加。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzAwNVpTajBHbHkxZ2ZoY2RxZmx5ZmozMHNrMGcydG5jLmpwZw?x-oss-process=image/format,png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>box-sizing:border-box为ie的盒模型，其宽度就为width，当设置了padding或者border时，会使得内容部分减小。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzAwNVpTajBHbHkxZ2ZoY2YwbWJnZmozMHJ2MGZwazNqLmpwZw?x-oss-process=image/format,png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>另外，如果为padding-box，则width为padding+width</p><h2 id="2、link和-import区别"><a href="#2、link和-import区别" class="headerlink" title="2、link和@import区别"></a>2、link和@import区别</h2><p>link是html标签不存在兼容性，页面被加载时，link也会被加载，而@import 引用的css会等到页面加载结束后在加载，且有兼容性，只有ie5以上才能被识别出来。link权重大于import</p><h2 id="3、transition和animation区别"><a href="#3、transition和animation区别" class="headerlink" title="3、transition和animation区别"></a>3、transition和animation区别</h2><p>transition是渐变需要有事件被触发，animation为动画，任何时候都可以执行，且transition为两帧，即from{}to{} animation则可以根据需求写出所需要的关键帧。</p><h2 id="4、flex布局"><a href="#4、flex布局" class="headerlink" title="4、flex布局"></a>4、flex布局</h2><p>弹性布局，为盒模型提供最大的灵活。传统布局需要定位或者浮动非常不方便。</p><p>flex布局的属性：</p><p>flex布局具有两条轴，主轴和交叉轴，两者是垂直的</p><p>flex-direction： row | row-reverse | column | column-reverse 这个定义了主轴的方向，水平或者是垂直</p><p>换行规则：</p><p>flex-wrap： nowrap | wrap | wrap-reverse; wrap就是元素过多允许换行，nowrap则不允许</p><p>flex-grow：基于flex-basis，flex-basis就是每个元素所占的宽度，默认为auto，flex-grow则是在flex-basis的基础上对元素进行延展，比如盒模型内的每个元素都设置为flex-grow为1，那么每个元素都会占1/3，</p><p>flex-shrink:则是处理flex元素的缩放的，如果盒模型不足以放下所有元素，就可以用该属性进行缩放。</p><p>flex：是flex-grow，flex-shrink，和flex-basis的整合，默认为0，1，auto</p><p>justify-content：对齐方式，水平主轴对齐方式</p><p>align-items：对齐方式，竖直轴线方向</p><p>用flex实现水平垂直居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.contain</span>&#123;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> red solid;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">justify-content</span>:center;</span><br><span class="line">    <span class="attribute">align-items</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"contain"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"......"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、BFC"><a href="#5、BFC" class="headerlink" title="5、BFC"></a>5、BFC</h2><p>格式化上下文，具有他自己的一套渲染规则，可以看作是一个被隔离的容器，里面的元素无论如何变化都不会影响到外面。</p><p>触发BFC特性的条件：</p><ul><li><p>body标签</p></li><li><p>浮动元素：float除none以外的值</p></li><li><p>绝对定位元素：absolute或者是fixed</p></li><li><p>display为inline-block，table-cell，flex，table-caption，inline-flex</p></li><li><p>overflow除了visible以外的值（hidden、auto、scroll）</p></li></ul><p>BFC特性：</p><ul><li><p>外边距折叠。</p></li><li><p>清除浮动，浮动会影起父元素高度塌缩，解决方法就是触发父元素的BFC特性。</p></li><li><p>防止非浮动元素被浮动元素所覆盖</p></li></ul><h2 id="6、习题：垂直居中的方法"><a href="#6、习题：垂直居中的方法" class="headerlink" title="6、习题：垂直居中的方法"></a>6、习题：垂直居中的方法</h2><p>方法一：父元素相对定位，子元素绝对定位并且上下左右都为0，margin：auto</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#a</span>&#123;</span></span><br><span class="line">position: relative;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px black solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#b</span>&#123;</span></span><br><span class="line">left: 0;</span><br><span class="line">top: 0;</span><br><span class="line">bottom: 0;</span><br><span class="line">right: 0;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">border: 1px red solid;</span><br><span class="line">position: absolute;</span><br><span class="line">margin: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法二:</p><p>负值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#a</span>&#123;</span></span><br><span class="line">position: relative;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px black solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#b</span>&#123;</span></span><br><span class="line">left: 50%;</span><br><span class="line">top: 50%;</span><br><span class="line">margin-left: -50px;</span><br><span class="line">margin-top: -50px;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">border: 1px red solid;</span><br><span class="line">position: absolute;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法三:</p><p>flex</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#a</span>&#123;</span></span><br><span class="line"></span><br><span class="line">width: 300px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px black solid;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#b</span>&#123;</span></span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">border: 1px red solid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法四：</p><p>视窗</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.aa</span>&#123;</span></span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: aqua;</span><br><span class="line">margin: 50vh auto  0;</span><br><span class="line"> transform: translateY(-50%); </span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、块元素和行元素"><a href="#7、块元素和行元素" class="headerlink" title="7、块元素和行元素"></a>7、块元素和行元素</h2><p>块元素独占一行能设置宽高和边距，会自动填充整个父元素</p><p>内元素：不会独占一行，且宽高都无效，垂直方向的padding和margin都会失效。</p><h2 id="8、双边距折叠"><a href="#8、双边距折叠" class="headerlink" title="8、双边距折叠"></a>8、双边距折叠</h2><p>多个普通文档流里的块元素的垂直方向的margin会折叠。</p><p>都是整数时，取最大的</p><p>都是负数时，取绝对值最大的</p><p>一正一负则取和。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">1px</span> red solid;</span><br><span class="line"><span class="attribute">margin-bottom</span>:<span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">1px</span> red solid;</span><br><span class="line"><span class="attribute">margin-top</span>:<span class="number">30px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述示例最终结果是两个块级元素会相差30px</p><h2 id="9、定位"><a href="#9、定位" class="headerlink" title="9、定位"></a>9、定位</h2><p>fixed：相对于浏览器窗口定位，与文档流无关。</p><p>absolute：绝对定位，相对于最近的非static定位的父元素定位，脱离文档流。</p><p>relative：相对定位，将出现在所在的位置上，可以通过改变上下左右他的位置，他是不脱离文档流的，仍旧占据原来的空间。</p><p>sticky：粘性定位，top为阈值，视窗小于top之前都是相对定位，之后将会固定为top</p><p>粘性定位demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#a</span>&#123;</span></span><br><span class="line"></span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">border: 1px red solid;</span><br><span class="line">overflow: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#b</span>&#123;</span></span><br><span class="line">width: 10px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px black solid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#c</span>&#123;</span></span><br><span class="line">position: sticky;</span><br><span class="line">width: 5px;</span><br><span class="line">height: 5px;</span><br><span class="line">top: 30px;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#000000</span>;</span></span><br><span class="line">margin-top: 100px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"c"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10、清除浮动"><a href="#10、清除浮动" class="headerlink" title="10、清除浮动"></a>10、清除浮动</h2><p>为什么要清楚浮动？</p><p>解决高度塌缩。</p><p>解决方法：</p><ul><li>在浮动元素后面给一个空元素并设置clear：both</li><li>触发父元素的BFC特性，比如overflow设置为auto或者是hidden</li><li>使用伪类，给父元素添加一个after并设置content为空，clear：both，display：block</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="11、画一条0-5px的线"><a href="#11、画一条0-5px的线" class="headerlink" title="11、画一条0.5px的线"></a>11、画一条0.5px的线</h2><p>使用scale（）进行缩放</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;这是从牛客网上总结下来的css面试基础题的一小部分，后续也会持续更新&quot;&gt;&lt;a href=&quot;#这是从牛客网上总结下来的css面试基础题的一小部分，后续也会持续更新&quot; class=&quot;headerlink&quot; title=&quot;这是从牛客网上总结下来的css面试基础题的一小部
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>js实现扫雷</title>
    <link href="http://yoursite.com/2020/07/24/js%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/"/>
    <id>http://yoursite.com/2020/07/24/js%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/</id>
    <published>2020-07-24T01:50:52.000Z</published>
    <updated>2020-07-24T04:00:48.867Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现效果："><a href="#实现效果：" class="headerlink" title="实现效果："></a>实现效果：</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200322191700303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDI2MDcw,size_16,color_FFFFFF,t_70" alt="扫雷" title="">                </div>                <div class="image-caption">扫雷</div>            </figure><h5 id="总体思想：这个扫雷难点主要就两点：第一点就是雷的随机分布，我这里使用js动态生成了10X10的table表格，然后设定生成20个雷，然后在生成每个格子代表的数字，雷我们用9表示，因为0-8要被其他非雷格子使用，然后我们只要一格是雷区那么周围的格子都加一，这样我们的雷区就生成好了，然后玩法的编写主要难点就是在当点击数字为0时的格子时要把它周围的0区也显示出来，因此这里我们使用递归来实现"><a href="#总体思想：这个扫雷难点主要就两点：第一点就是雷的随机分布，我这里使用js动态生成了10X10的table表格，然后设定生成20个雷，然后在生成每个格子代表的数字，雷我们用9表示，因为0-8要被其他非雷格子使用，然后我们只要一格是雷区那么周围的格子都加一，这样我们的雷区就生成好了，然后玩法的编写主要难点就是在当点击数字为0时的格子时要把它周围的0区也显示出来，因此这里我们使用递归来实现" class="headerlink" title="总体思想：这个扫雷难点主要就两点：第一点就是雷的随机分布，我这里使用js动态生成了10X10的table表格，然后设定生成20个雷，然后在生成每个格子代表的数字，雷我们用9表示，因为0-8要被其他非雷格子使用，然后我们只要一格是雷区那么周围的格子都加一，这样我们的雷区就生成好了，然后玩法的编写主要难点就是在当点击数字为0时的格子时要把它周围的0区也显示出来，因此这里我们使用递归来实现"></a>总体思想：这个扫雷难点主要就两点：第一点就是雷的随机分布，我这里使用js动态生成了10X10的table表格，然后设定生成20个雷，然后在生成每个格子代表的数字，雷我们用9表示，因为0-8要被其他非雷格子使用，然后我们只要一格是雷区那么周围的格子都加一，这样我们的雷区就生成好了，然后玩法的编写主要难点就是在当点击数字为0时的格子时要把它周围的0区也显示出来，因此这里我们使用递归来实现</h5><h6 id="1、界面的生成"><a href="#1、界面的生成" class="headerlink" title="1、界面的生成"></a>1、界面的生成</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成界面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;table border='1px'  rules='all' cellpadding='10px '&gt; "</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;tr&gt;"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;td class='game'&gt;"</span> + arr3[i][j] + <span class="string">"&lt;/td&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;/table&gt;"</span>)</span><br><span class="line"><span class="keyword">var</span> t = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'table'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> td = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'td'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; td.length; i++) &#123;</span><br><span class="line">td[i].style.background=<span class="string">'#ffffff'</span>;</span><br><span class="line">td[i].style.opacity = <span class="string">'0'</span>;</span><br><span class="line">td[i].style.transition = <span class="string">'all 4s'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//样式添加</span></span><br><span class="line">t.style.margin = <span class="string">'0px auto'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2、我们表格是10X10的，但是后面的操作要计算每个格子的值，因此当格子在边界的话数组就会越界，所以我们这边定义二维数组12X12来表示10X10的表格中的数值，雷我们随机生成20个"><a href="#2、我们表格是10X10的，但是后面的操作要计算每个格子的值，因此当格子在边界的话数组就会越界，所以我们这边定义二维数组12X12来表示10X10的表格中的数值，雷我们随机生成20个" class="headerlink" title="2、我们表格是10X10的，但是后面的操作要计算每个格子的值，因此当格子在边界的话数组就会越界，所以我们这边定义二维数组12X12来表示10X10的表格中的数值，雷我们随机生成20个"></a>2、我们表格是10X10的，但是后面的操作要计算每个格子的值，因此当格子在边界的话数组就会越界，所以我们这边定义二维数组12X12来表示10X10的表格中的数值，雷我们随机生成20个</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initarr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">arr[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">12</span>; j++) &#123;</span><br><span class="line">arr[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随机生成雷</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rangemine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = initarr();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="number">20</span>; index++) &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> row = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> col = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[row][col] != <span class="number">9</span>) &#123;</span><br><span class="line">arr[row][col] = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3、生成每块对应的数值我们实现方法为遍历数组，如果为雷，则雷周围的八块的数值-1"><a href="#3、生成每块对应的数值我们实现方法为遍历数组，如果为雷，则雷周围的八块的数值-1" class="headerlink" title="3、生成每块对应的数值我们实现方法为遍历数组，如果为雷，则雷周围的八块的数值+1"></a>3、生成每块对应的数值我们实现方法为遍历数组，如果为雷，则雷周围的八块的数值+1</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成每块所对应的数字</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr2 = rangemine();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr2[i][j] &gt;= <span class="number">9</span>) &#123;</span><br><span class="line">arr2[i][j + <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">arr2[i][j - <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">arr2[i - <span class="number">1</span>][j] += <span class="number">1</span>;</span><br><span class="line">arr2[i + <span class="number">1</span>][j] += <span class="number">1</span>;</span><br><span class="line">arr2[i - <span class="number">1</span>][j + <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">arr2[i - <span class="number">1</span>][j - <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">arr2[i + <span class="number">1</span>][j - <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">arr2[i + <span class="number">1</span>][j + <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr2[i][j] &gt; <span class="number">8</span>) &#123;</span><br><span class="line">arr2[i][j] = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4、添加监听器，我这里添加了touch事件-touch事件只用于移动端，因此pc端要运行要模拟移动端"><a href="#4、添加监听器，我这里添加了touch事件-touch事件只用于移动端，因此pc端要运行要模拟移动端" class="headerlink" title="4、添加监听器，我这里添加了touch事件,touch事件只用于移动端，因此pc端要运行要模拟移动端"></a>4、添加监听器，我这里添加了touch事件,touch事件只用于移动端，因此pc端要运行要模拟移动端</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加监听器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gostart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> t = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'td'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; t.length; i++) &#123;</span><br><span class="line">&#123;</span><br><span class="line">t[i].addEventListener(<span class="string">'touchstart'</span>, start);</span><br><span class="line">t[i].addEventListener(<span class="string">'touchend'</span>, end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">gostart();</span><br><span class="line"><span class="comment">//开始函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log((e.touches[<span class="number">0</span>]));</span><br><span class="line"><span class="keyword">var</span> a = e.touches[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结尾函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = e.touches[<span class="number">0</span>];</span><br><span class="line">mix(e.srcElement.parentElement.rowIndex + <span class="number">1</span>, e.srcElement.cellIndex + <span class="number">1</span>, e.srcElement.parentElement);</span><br><span class="line"><span class="comment">/* startgame(e.srcElement.parentElement.rowIndex,e.srcElement.cellIndex,e.srcElement); */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5、递归实现扫雷，对周围没有雷的格子进行递归将其周围也是0的格子展示出来"><a href="#5、递归实现扫雷，对周围没有雷的格子进行递归将其周围也是0的格子展示出来" class="headerlink" title="5、递归实现扫雷，对周围没有雷的格子进行递归将其周围也是0的格子展示出来"></a>5、递归实现扫雷，对周围没有雷的格子进行递归将其周围也是0的格子展示出来</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归消除点到0块时显露出其他的块</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mix</span>(<span class="params">x, y, e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> flag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; <span class="number">11</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">11</span> &amp;&amp; arr3[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//防止无限递归</span></span><br><span class="line">e.parentElement.rows[x - <span class="number">1</span>].cells[y - <span class="number">1</span>].style.opacity = <span class="number">1</span>;</span><br><span class="line">e.parentElement.rows[x - <span class="number">1</span>].cells[y - <span class="number">1</span>].innerHTML=<span class="string">""</span>;</span><br><span class="line">e.parentElement.rows[x - <span class="number">1</span>].cells[y - <span class="number">1</span>].style.background = <span class="string">'#a4eaff'</span>;</span><br><span class="line">arr3[x][y] = <span class="number">10</span>;</span><br><span class="line">mix(x, y + <span class="number">1</span>, e);</span><br><span class="line">mix(x, y - <span class="number">1</span>, e);</span><br><span class="line">mix(x + <span class="number">1</span>, y, e);</span><br><span class="line">mix(x - <span class="number">1</span>, y, e);</span><br><span class="line">mix(x + <span class="number">1</span>, y + <span class="number">1</span>, e);</span><br><span class="line">mix(x - <span class="number">1</span>, y + <span class="number">1</span>, e);</span><br><span class="line">mix(x + <span class="number">1</span>, y - <span class="number">1</span>, e);</span><br><span class="line">mix(x - <span class="number">1</span>, y - <span class="number">1</span>, e);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; <span class="number">11</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">11</span> &amp;&amp; arr3[x][y] &gt; <span class="number">0</span> &amp;&amp; arr3[x][y] &lt; <span class="number">9</span>) &#123;</span><br><span class="line"><span class="comment">//颜色变红且透明度变为1</span></span><br><span class="line">arr3[x][y]=<span class="number">-1</span>;</span><br><span class="line">e.parentElement.rows[x - <span class="number">1</span>].cells[y - <span class="number">1</span>].style.opacity = <span class="number">1</span>;</span><br><span class="line">e.parentElement.rows[x - <span class="number">1</span>].cells[y - <span class="number">1</span>].style.backgroundColor = <span class="string">'#a4eaff'</span>;</span><br><span class="line"><span class="comment">//判断是否结束</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;arr3.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;arr3[i].length<span class="number">-1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr3[i][j]!=<span class="number">-1</span>||arr3[i][j]!=<span class="number">9</span>)&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">alert(<span class="string">'成功'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; <span class="number">11</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">11</span> &amp;&amp; arr3[x][y] == <span class="number">9</span>) &#123;</span><br><span class="line">alert(<span class="string">'你踩到地雷啦！！！'</span>);</span><br><span class="line">arr3 = num();</span><br><span class="line"><span class="comment">//移除原来的表格</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'table'</span>)[<span class="number">0</span>];</span><br><span class="line">s.parentNode.removeChild(s);</span><br><span class="line">init();</span><br><span class="line">gostart();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="6、全部js代码："><a href="#6、全部js代码：" class="headerlink" title="6、全部js代码："></a>6、全部js代码：</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initarr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">arr[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">12</span>; j++) &#123;</span><br><span class="line">arr[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随机生成雷</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rangemine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = initarr();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="number">20</span>; index++) &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> row = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> col = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[row][col] != <span class="number">9</span>) &#123;</span><br><span class="line">arr[row][col] = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成每块所对应的数字</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr2 = rangemine();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr2[i][j] &gt;= <span class="number">9</span>) &#123;</span><br><span class="line">arr2[i][j + <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">arr2[i][j - <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">arr2[i - <span class="number">1</span>][j] += <span class="number">1</span>;</span><br><span class="line">arr2[i + <span class="number">1</span>][j] += <span class="number">1</span>;</span><br><span class="line">arr2[i - <span class="number">1</span>][j + <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">arr2[i - <span class="number">1</span>][j - <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">arr2[i + <span class="number">1</span>][j - <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">arr2[i + <span class="number">1</span>][j + <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr2[i][j] &gt; <span class="number">8</span>) &#123;</span><br><span class="line">arr2[i][j] = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = num()</span><br><span class="line"><span class="comment">//生成界面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;table border='1px'  rules='all' cellpadding='10px '&gt; "</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;tr&gt;"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;td class='game'&gt;"</span> + arr3[i][j] + <span class="string">"&lt;/td&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;/table&gt;"</span>)</span><br><span class="line"><span class="keyword">var</span> t = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'table'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> td = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'td'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; td.length; i++) &#123;</span><br><span class="line">td[i].style.background=<span class="string">'#ffffff'</span>;</span><br><span class="line">td[i].style.opacity = <span class="string">'0'</span>;</span><br><span class="line">td[i].style.transition = <span class="string">'all 4s'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//样式添加</span></span><br><span class="line">t.style.margin = <span class="string">'0px auto'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.close()</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br><span class="line"><span class="comment">//添加监听器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gostart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> t = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'td'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; t.length; i++) &#123;</span><br><span class="line">&#123;</span><br><span class="line">t[i].addEventListener(<span class="string">'touchstart'</span>, start);</span><br><span class="line">t[i].addEventListener(<span class="string">'touchend'</span>, end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">gostart();</span><br><span class="line"><span class="comment">//开始函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log((e.touches[<span class="number">0</span>]));</span><br><span class="line"><span class="keyword">var</span> a = e.touches[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结尾函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = e.touches[<span class="number">0</span>];</span><br><span class="line">mix(e.srcElement.parentElement.rowIndex + <span class="number">1</span>, e.srcElement.cellIndex + <span class="number">1</span>, e.srcElement.parentElement);</span><br><span class="line"><span class="comment">/* startgame(e.srcElement.parentElement.rowIndex,e.srcElement.cellIndex,e.srcElement); */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归消除点到0块时显露出其他的块</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mix</span>(<span class="params">x, y, e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> flag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; <span class="number">11</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">11</span> &amp;&amp; arr3[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//防止无限递归</span></span><br><span class="line">e.parentElement.rows[x - <span class="number">1</span>].cells[y - <span class="number">1</span>].style.opacity = <span class="number">1</span>;</span><br><span class="line">e.parentElement.rows[x - <span class="number">1</span>].cells[y - <span class="number">1</span>].innerHTML=<span class="string">""</span>;</span><br><span class="line">e.parentElement.rows[x - <span class="number">1</span>].cells[y - <span class="number">1</span>].style.background = <span class="string">'#a4eaff'</span>;</span><br><span class="line">arr3[x][y] = <span class="number">10</span>;</span><br><span class="line">mix(x, y + <span class="number">1</span>, e);</span><br><span class="line">mix(x, y - <span class="number">1</span>, e);</span><br><span class="line">mix(x + <span class="number">1</span>, y, e);</span><br><span class="line">mix(x - <span class="number">1</span>, y, e);</span><br><span class="line">mix(x + <span class="number">1</span>, y + <span class="number">1</span>, e);</span><br><span class="line">mix(x - <span class="number">1</span>, y + <span class="number">1</span>, e);</span><br><span class="line">mix(x + <span class="number">1</span>, y - <span class="number">1</span>, e);</span><br><span class="line">mix(x - <span class="number">1</span>, y - <span class="number">1</span>, e);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; <span class="number">11</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">11</span> &amp;&amp; arr3[x][y] &gt; <span class="number">0</span> &amp;&amp; arr3[x][y] &lt; <span class="number">9</span>) &#123;</span><br><span class="line"><span class="comment">//颜色变红且透明度变为1</span></span><br><span class="line">arr3[x][y]=<span class="number">-1</span>;</span><br><span class="line">e.parentElement.rows[x - <span class="number">1</span>].cells[y - <span class="number">1</span>].style.opacity = <span class="number">1</span>;</span><br><span class="line">e.parentElement.rows[x - <span class="number">1</span>].cells[y - <span class="number">1</span>].style.backgroundColor = <span class="string">'#a4eaff'</span>;</span><br><span class="line"><span class="comment">//判断是否结束</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;arr3.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;arr3[i].length<span class="number">-1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr3[i][j]!=<span class="number">-1</span>||arr3[i][j]!=<span class="number">9</span>)&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">alert(<span class="string">'成功'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; <span class="number">11</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">11</span> &amp;&amp; arr3[x][y] == <span class="number">9</span>) &#123;</span><br><span class="line">alert(<span class="string">'你踩到地雷啦！！！'</span>);</span><br><span class="line">arr3 = num();</span><br><span class="line"><span class="comment">//移除原来的表格</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'table'</span>)[<span class="number">0</span>];</span><br><span class="line">s.parentNode.removeChild(s);</span><br><span class="line">init();</span><br><span class="line">gostart();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h6><p>这次的扫雷最大的缺点就是不能保证第一次不点到雷，还有就是是否还没有进行测试。。因为我也没有玩过一整局可能会有些许小bug</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;实现效果：&quot;&gt;&lt;a href=&quot;#实现效果：&quot; class=&quot;headerlink&quot; title=&quot;实现效果：&quot;&gt;&lt;/a&gt;实现效果：&lt;/h3&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>express-jwt实现token验证</title>
    <link href="http://yoursite.com/2020/07/24/express-jwt%E5%AE%9E%E7%8E%B0token%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2020/07/24/express-jwt%E5%AE%9E%E7%8E%B0token%E9%AA%8C%E8%AF%81/</id>
    <published>2020-07-24T01:49:17.000Z</published>
    <updated>2020-07-24T06:39:06.267Z</updated>
    
    <content type="html"><![CDATA[<p>由于面试了前端，但是我简历上写着我会后端所以被问到了token验证这个问题，但是我自己的项目是没有用到的，他问了我jwt的组成结构什么的。。我当然是一问三不知啦，所以回来之后就自己额外做了一下这个token验证。</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>jwt主要有三部分组成</p><ul><li>header，主要就是存放了你的token类型和你的加密方式。</li><li>playload，一般有签发人，签发时间，过期时间，编号等，这部分是可以添加自己的一些数据进去。</li><li>signature，要生成这个是需要以上两个字段的，还需要一个密钥，这是只有服务端才知道的一个密钥，生成公式HMACSHA256(<br>base64UrlEncode(header) + “.” +<br>base64UrlEncode(payload),<br>secret)<br>上两个字段的base64加上密钥，通过’.’来进行连接，然后再通过hash256进行加密。<br>以上三个字段再通过’.’来连接的这样就生成了一个token。</li></ul><h2 id="nodejs生成和验证token"><a href="#nodejs生成和验证token" class="headerlink" title="nodejs生成和验证token"></a>nodejs生成和验证token</h2><p>我们只需要安装一个jsonwebtoken就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install  jsonwebtoken</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Meng Jiawei</span></span><br><span class="line"><span class="comment"> * @Date: 2020-06-18 22:36:58</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-06-18 23:08:36</span></span><br><span class="line"><span class="comment"> * @FilePath: \expressdemo\index.js</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">const</span> jwt=<span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>)</span><br><span class="line"><span class="keyword">const</span> playload=&#123;</span><br><span class="line">    name:<span class="string">'mjw'</span>,</span><br><span class="line">    admin:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> secret=<span class="string">'mengjiawei'</span></span><br><span class="line"><span class="keyword">const</span> token=jwt.sign(playload,secret,&#123;<span class="attr">expiresIn</span>:<span class="string">'1day'</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(token)</span><br></pre></td></tr></table></figure><p>我们使用jwt.sign方法就可以生成这个token，这个方法主要有三个参数，一个就是基本信息，你从前端拿来需要放进token进行加密的东西，然后就是密钥，最后是一个option，我这边是给了一个过期时间为一天。<br>验证的话我们只要执行下面这一句就行了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jwt.verify(token,<span class="string">'mengjiawei'</span>,(err,decoded)=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'invalid'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(decoded)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>如果验证失败就会输出invalid，验证成功就会输出你的token明文信息</p><h2 id="在express路由中的使用"><a href="#在express路由中的使用" class="headerlink" title="在express路由中的使用"></a>在express路由中的使用</h2><p>我们生成还是跟之前的一样的，在用户登录的时候生成token并返回，我这边写了个简单的例子，成功则返回token不成功则返回失败</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/login'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">      <span class="keyword">if</span>(req.body.username==<span class="string">'123456'</span>)&#123;</span><br><span class="line">          <span class="keyword">let</span> playload=&#123;&#125;</span><br><span class="line">          playload.username=req.body.username</span><br><span class="line">          playload.password=req.body.password</span><br><span class="line">          <span class="keyword">const</span> secretkey=<span class="string">'MMJJWW'</span></span><br><span class="line">          <span class="keyword">let</span> token=jwt.sign(playload,secretkey,&#123;<span class="attr">expiresIn</span>:<span class="string">'1day'</span>&#125;)</span><br><span class="line">          res.json(&#123;</span><br><span class="line">            code:<span class="number">200</span>,</span><br><span class="line">            msg:<span class="string">'登陆成功'</span>,</span><br><span class="line">            token:token</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          res.json(&#123;</span><br><span class="line">            msg:<span class="string">'错误'</span></span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这边可以用postman来测试一下<br>测试结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/2020061900161289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDI2MDcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>可以看到成功的返回了token<br>接下来是对每个请求都要进行token验证。我们需要使用express-jwt这个中间件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-jwt</span><br></pre></td></tr></table></figure><p>然后我们可以新建一个check.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Meng Jiawei</span></span><br><span class="line"><span class="comment"> * @Date: 2020-06-18 23:30:57</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-06-18 23:39:28</span></span><br><span class="line"><span class="comment"> * @FilePath: \expressdemo\check.js</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">const</span> expressjwt=<span class="built_in">require</span>(<span class="string">'express-jwt'</span>)</span><br><span class="line"><span class="keyword">const</span> key=<span class="string">'MMJJWW'</span></span><br><span class="line"><span class="keyword">const</span> jwtauth=expressjwt(&#123;<span class="attr">secret</span>:key&#125;).unless(&#123;<span class="attr">path</span>:[<span class="string">'/users/login'</span>]&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports=jwtauth</span><br></pre></td></tr></table></figure><p>这边就是对中间件的配置，只要以对象形式传递一个密钥参数即可，unless就是不对哪个路由生效，我这边设置了登录的时候不需要验证token。<br>然后在route文件夹下的index.js,配置这个中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.use(jwt)</span><br><span class="line">router.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'这个token被允许了'</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>只要use就可以了，后一个就是如果验证成功了会执行的，next就是去执行接下来的路由。如果验证失败了，会直接告诉前台出错了，前端需要设置拦截器进行处理<br>我这边他也设置了一个/users/test路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/test'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'token能正常使用'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>就简单的返回一句字符串，主要用来测试的。<br>然后我们前端只要把token放在headers的Authorization字段中就可以了，这个字段是expressjwt规定的，如果不这样设置会报错，说找不到这个字段，然后字段里面的内容要是Bearer+token这个类型的。<br>比如<br>Bearer 1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjEyMzQ1NiIsInBhc3N3b3JkIjoibWVuZ2ppYXdlaSIsImlhdCI6MTU5MjQ5NDk1NiwiZXhwIjoxNTkyNTgxMzU2fQ.jBkarDsw71y2oXgG19N3Pad2ou2Oz2UDTwhEp9-cJI0<br>不然的话也会报错，说你的格式错误了，一定要在token前加入Bearer。<br>比如我们用postman来对刚才产生的token进行验证一下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200619003129149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDI2MDcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>我们发现成功接收到了返回的数据。<br>如果我们在改变token，我在之前的token上在加了一个1，结果如下。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200619003249344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDI2MDcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>他就会说这个token是非法的。前端只要添加一个拦截器在结果返回前对错误进行处理即可。</p><p>这样我们的token实现基本的权限验证基本就已经完成了，后续还是可以根据自己的需求来完善的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于面试了前端，但是我简历上写着我会后端所以被问到了token验证这个问题，但是我自己的项目是没有用到的，他问了我jwt的组成结构什么的。。我当然是一问三不知啦，所以回来之后就自己额外做了一下这个token验证。&lt;/p&gt;
&lt;h2 id=&quot;组成&quot;&gt;&lt;a href=&quot;#组成&quot; 
      
    
    </summary>
    
    
      <category term="前后端" scheme="http://yoursite.com/categories/%E5%89%8D%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="express" scheme="http://yoursite.com/tags/express/"/>
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript手写快排</title>
    <link href="http://yoursite.com/2020/07/24/JavaScript%E6%89%8B%E5%86%99%E5%BF%AB%E6%8E%92/"/>
    <id>http://yoursite.com/2020/07/24/JavaScript%E6%89%8B%E5%86%99%E5%BF%AB%E6%8E%92/</id>
    <published>2020-07-24T01:30:02.000Z</published>
    <updated>2020-07-24T04:00:45.949Z</updated>
    
    <content type="html"><![CDATA[<p>最近的一次前端实习面试题。。因为没准备充分，导致在快排这一块就直接死了。。太丢人了。回来之后好好总结了下，然后写下这篇js实现快排。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>原理其实很简单，我们要先设一个<strong>基准数</strong>，<strong>我们一般设为第一个</strong>，然后我们从数组的<strong>两端</strong>开始找，这边我们开始节点设为<strong>low</strong>，尾节点设为<strong>high</strong>，我们从high开始往左找一个比基准数要小的数，（至于为什么要先从high开始往左查找后边我们会讲到），我们在从low开始往右找比基准数大的值，这里一定要满足low是小于high的，然后我们交换找到的两个值，然后当我们找的过程中low=high了则这个值与基准数进行交换，可以看下图的过程演示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200618172450278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDI2MDcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>这样后我们第一次就结束了，可以看到基准数为9，最后一次执行完后，9左边的都比9小，右边的都比9大。这样我们第一次就完成了，有一种’二分’的思想，之后我们只要对左边和右边分别进行上述操作即可，可以轻松的用递归来实现了。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>为什么要从右边找，这其实很好理解，因为我们最后low=high了，找到的那个值，必须比基准小（仅限从小到大排序，且基准在左边），因为要确保左边的比基准都小。这边可以举个例子：</p><h4 id="4-3-6-5-7"><a href="#4-3-6-5-7" class="headerlink" title="4 3 6  5 7"></a>4 3 6  5 7</h4><p>如果先从左边找的话：第一个比4大的值为6，那么我们再从右边找一个比4小的值，我们会发现是3，但是如果要找到3那么high要比low要小了，我们在low=high的时候就要交换和基准了，所以最后结果会变成</p><h4 id="6-3-4-5-7"><a href="#6-3-4-5-7" class="headerlink" title="6 3 4 5 7"></a>6 3 4 5 7</h4><p>这样就并不能保证4左边的一定比4小，右边的比4大。</p><p>搞懂原理，代码实现就很简单了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Meng Jiawei</span></span><br><span class="line"><span class="comment"> * @Date: 2020-06-18 16:01:59</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-06-18 17:06:46</span></span><br><span class="line"><span class="comment"> * @FilePath: \node_demo1\index.js</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr,left,right</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> symbol=arr[left]</span><br><span class="line">    <span class="keyword">let</span> i=left</span><br><span class="line">    <span class="keyword">let</span> j=right</span><br><span class="line">    <span class="keyword">while</span>(i!=j)&#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;arr[j]&gt;=symbol)</span><br><span class="line">        j--;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;arr[i]&lt;=symbol)</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">let</span> temp=arr[i]</span><br><span class="line">            arr[i]=arr[j]</span><br><span class="line">            arr[j]=temp</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> temp1=arr[i]</span><br><span class="line">    arr[i]=arr[left]</span><br><span class="line">    arr[left]=temp1</span><br><span class="line">    sort(arr,<span class="number">0</span>,i<span class="number">-1</span>);</span><br><span class="line">    sort(arr,i+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=[<span class="number">9</span>，<span class="number">5</span>，<span class="number">11</span>，<span class="number">4</span>，<span class="number">1</span>，<span class="number">7</span>，<span class="number">6</span>]</span><br><span class="line">sort(a,<span class="number">0</span>,a.length<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近的一次前端实习面试题。。因为没准备充分，导致在快排这一块就直接死了。。太丢人了。回来之后好好总结了下，然后写下这篇js实现快排。&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
